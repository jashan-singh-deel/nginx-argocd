---
{{- if and (not .Values.api.db.external) (eq .Values.api.db.type "psql") }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Release.Namespace }}
  labels:
    name: postgres
spec:
  selector:
    matchLabels:
      {{- include "api.db.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        name: postgres
    spec:
      serviceAccountName: {{ template "devportal.serviceAccountName" . }}
      initContainers:
        - name: copy-tls-files
          image: busybox
          command: ['sh', '-c', 'cp /certs/* {{ template "devportal.postgres.certs.mountPath" . -}}/ && chown 70:70 {{ template "devportal.postgres.certs.mountPath" . -}}/* && chmod 0600 {{ template "devportal.postgres.certs.mountPath" . -}}/*.key']
          volumeMounts:
            - name: db-certs
              mountPath: {{ template "devportal.postgres.certs.mountPath" . }}
            - name: db-certs-pre-install
              mountPath: /certs
              readOnly: true
      containers:
        - name: postgres
          image: postgres:12.5-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ template "api.dbPort" . }}
          args:
            - -c
            - log_min_duration_statement=2000
            - -c
            - log_connections=on
            - -c
            - 'log_line_prefix=%m %d %r %i: '
            - -c
            - shared_preload_libraries=pg_stat_statements
            - -c
            - jit=off
            - -c
            - max_connections=200
            - -c
            - huge_pages=off
            - -c
            - ssl=on
            - -c
            - ssl_ca_file=$(POSTGRES_TLS_CA)
            - -c
            - ssl_cert_file=$(POSTGRES_TLS_CERT)
            - -c
            - ssl_key_file=$(POSTGRES_TLS_KEY)
          lifecycle:
            preStop:
              exec:
                command: ["su-exec", "postgres", "pg_ctl", "-m", "fast", "-w", "stop"]
          readinessProbe:
            exec:
              command:
              - bash
              - "-c"
              - | 
                pg_isready -h 127.0.0.1 -d $POSTGRES_DB -U $POSTGRES_USER -t 3
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          env:
            {{- include "api.db.env" . | nindent 12 }}
          volumeMounts:
            - name: postgres
              mountPath: /var/lib/postgresql
            - name: db-certs
              mountPath: {{ template "devportal.postgres.certs.mountPath" . }}
      volumes:
        - name: postgres
          persistentVolumeClaim:
            claimName: "psql-storage"
        - name: db-certs
          emptyDir: {}
        - name: db-certs-pre-install
          projected:
            sources:
              - secret:
                  name: "db-certs"
{{ end }}